Title,Body,Status,Phase,Priority,Estimate
"Create monorepo structure (backend/, frontend/, infra/, docs/)",Set up folders and basic READMEs. Ensure clean clone builds.,Todo,Phase 0 — Foundations,Medium,
"Add developer tooling (EditorConfig, Prettier, ESLint, Spotless, Checkstyle)",Lint/format hooks; Spotless & Checkstyle in Maven; Prettier+ESLint in Next.js.,Todo,Phase 0 — Foundations,Medium,
Set up CI (GitHub Actions) for backend and frontend,Workflows: build+test on PR for both modules; badges in README.,Todo,Phase 0 — Foundations,Medium,
Document local dev instructions,"Single section in README covering Java, Node, pnpm, and run commands.",Todo,Phase 0 — Foundations,Medium,
"Scaffold Spring Boot project (Java 21, Maven)",Create base package com.yourname.trackexplorer with config/web/application/domain/infra.,Todo,Phase 1 — Backend skeleton,Medium,
Add Flyway and initial DB migration,Create baseline migration; users table placeholder.,Todo,Phase 1 — Backend skeleton,Medium,
Create health and ping endpoints,Expose /actuator/health and /api/ping with JSON.,Todo,Phase 1 — Backend skeleton,Medium,
Establish hexagonal structure + unit test baseline,Sample domain entity + domain test; controller slice test.,Todo,Phase 1 — Backend skeleton,Medium,
Implement JWT auth (register/login/me),"Spring Security, password hashing, httpOnly cookie for session.",Todo,Phase 2 — App auth,Medium,
Protect /api/me and verify anonymous denied,Controller tests for 401 vs 200; Postman example.,Todo,Phase 2 — App auth,Medium,
Add User JPA entity + repository,"users(id, email unique, password_hash, created_at).",Todo,Phase 2 — App auth,Medium,
Error handling with problem+json,Global @ControllerAdvice returning RFC7807 style responses.,Todo,Phase 2 — App auth,Medium,
Authorize URL endpoint with PKCE (GET /oauth/spotify/authorize),Generate state + code challenge; return Spotify authorize URL.,Todo,Phase 3 — Spotify linking,Medium,
Callback handler (GET /oauth/spotify/callback) + token exchange,"Store access_token, refresh_token, expires_at; link to current app user.",Todo,Phase 3 — Spotify linking,Medium,
AccountLink domain + persistence,spotify_accounts table with unique(user_id) and unique(spotify_user_id).,Todo,Phase 3 — Spotify linking,Medium,
Token refresh service & scheduled renew,"Before calls, refresh if expiring; scheduled safety renewal.",Todo,Phase 3 — Spotify linking,Medium,
Implement GetMyPlaylists use case + REST,Paged playlists (public/private). Contract tests using WireMock.,Todo,Phase 4 — Data contracts & fetch,Medium,
Implement GetMyTopTracks use case + REST,Short/medium/long term ranges; DTOs shaped for UI.,Todo,Phase 4 — Data contracts & fetch,Medium,
Add audio features endpoint,"GetAudioFeaturesForTracks (tempo, energy, valence, danceability).",Todo,Phase 4 — Data contracts & fetch,Medium,
Introduce Caffeine caching + ETag pass-through,Cache popular responses; log 200 vs 304.,Todo,Phase 4 — Data contracts & fetch,Medium,
Scaffold Next.js 15 app with Tailwind + daisyUI,"App Router, basic layout, theme, and auth-aware nav.",Todo,Phase 5 — Frontend MVP,Medium,
Build Login/Register pages and session handling,Forms calling backend; httpOnly cookie; error states.,Todo,Phase 5 — Frontend MVP,Medium,
Dashboard page with Connect Spotify card,If not linked show CTA; if linked show profile summary.,Todo,Phase 5 — Frontend MVP,Medium,
Playlists page with search & pagination,Grid/list toggle; loading/empty/error states.,Todo,Phase 5 — Frontend MVP,Medium,
Top Tracks page with time-range filters,Chips for short/medium/long; show audio feature chips.,Todo,Phase 5 — Frontend MVP,Medium,
Add Micrometer metrics + Prometheus endpoint,Expose metrics; local docker-compose for Prometheus/Grafana (optional).,Todo,Phase 6 — Backend polish,Medium,
Add request logging + correlation IDs,Structured JSON logs; logback config.,Todo,Phase 6 — Backend polish,Medium,
Rate limiting on public endpoints (Bucket4j),Basic per-IP limits; 429 responses; tests.,Todo,Phase 6 — Backend polish,Medium,
OpenAPI (springdoc) + API versioning,Expose /v3/api-docs and /swagger-ui (dev only); prefix /api/v1.,Todo,Phase 6 — Backend polish,Medium,
Containerise backend (Dockerfile + GH Actions image build),Multi-stage build; push to GHCR or ECR.,Todo,Phase 7 — AWS deploy,Medium,
Provision DB & secrets,RDS Postgres (or Neon) and AWS Secrets Manager entries.,Todo,Phase 7 — AWS deploy,Medium,
Deploy backend to App Runner or ECS,Public HTTPS; health check passes; environment wired to secrets.,Todo,Phase 7 — AWS deploy,Medium,
Deploy frontend (Vercel or Amplify Hosting),Point to API base URL; smoke test E2E.,Todo,Phase 7 — AWS deploy,Medium,
Ship logs/metrics to CloudWatch,Log group per service; basic dashboards.,Todo,Phase 8 — Ops & observability,Medium,
Create alarms for 5xx rate & latency (SNS email),Alarm policies; test by inducing handled error.,Todo,Phase 8 — Ops & observability,Medium,
Write RUNBOOK.md,"Key procedures: rotate secrets, relink Spotify, common failures.",Todo,Phase 8 — Ops & observability,Medium,
Daily sync job & history chart,Scheduled snapshot of playlists; simple trend chart in UI.,Todo,Phase 9 — Nice-to-haves,Medium,
Content-based recommendations (audio features),Cosine similarity demo; explain limitations.,Todo,Phase 9 — Nice-to-haves,Medium,
Shareable summary card (OG image),Generate OG image for top artists/tracks.,Todo,Phase 9 — Nice-to-haves,Medium,